Blocking the Event Loop: REDOS
  You should be leery of using complex regular expressions to validate user input.
  here are some tools to check your regexps for safety, like
    safe-regex
    rxxr2. However, neither of these will catch all vulnerable regexps.
  Another approach is to use a different regexp engine. You could use the node-re2 module, which uses Google's blazing-fast RE2 regexp engine.
  But be warned, RE2 is not 100% compatible with Node's regexps, so check for regressions if you swap in the node-re2 module to handle your regexps.
  And particularly complicated regexps are not supported by node-re2.

  If you're trying to match something "obvious", like a URL or a file path, find an example in a regexp library or use an npm module, e.g. ip-regex.

Blocking the Event Loop: Node core modules
  In a server, you should not use the following synchronous APIs from these modules:
    Encryption:
      crypto.randomBytes (synchronous version)
      crypto.randomFillSync
      crypto.pbkdf2Sync
      You should also be careful about providing large input to the encryption and decryption routines.
    Compression:
      zlib.inflateSync
      zlib.deflateSync
    File system:
      Do not use the synchronous file system APIs. For example, if the file you access is in a distributed file system like NFS,
      access times can vary widely.
    Child process:
      child_process.spawnSync
      child_process.execSync
      child_process.execFileSync

Blocking the Event Loop: JSON DOS
  JSON.parse and JSON.stringify are other potentially expensive operations.
  While these are O(n) in the length of the input, for large n they can take surprisingly long.
  There are npm modules that offer asynchronous JSON APIs. See for example:
    JSONStream, which has stream APIs.
    Big-Friendly JSON, which has stream APIs as well as asynchronous versions of the standard JSON APIs
    using the partitioning-on-the-Event-Loop paradigm outlined below.

Complex calculations without blocking the Event Loop
  You have two options: partitioning or offloading.
    Partitioning
      Example 1: Un-partitioned average, costs O(n)
      for (let i = 0; i < n; i++)
        sum += i;
      let avg = sum / n;
      console.log('avg: ' + avg);
      Example 2: Partitioned average, each of the n asynchronous steps costs O(1).
      function asyncAvg(n, avgCB) {
        // Save ongoing sum in JS closure.
        var sum = 0;
        function help(i, cb) {
          sum += i;
          if (i == n) {
            cb(sum);
            return;
          }

          // "Asynchronous recursion".
          // Schedule next operation asynchronously.
          setImmediate(help.bind(null, i+1, cb));
        }

        // Start the helper, with CB to call avgCB.
        help(1, function(sum){
            var avg = sum/n;
            avgCB(avg);
        });
      }

      asyncAvg(n, function(avg){
        console.log('avg of 1-n: ' + avg);
      });
    Offloading
      You have two options for a destination Worker Pool to which to offload work.
        1. You can use the built-in Node Worker Pool by developing a C++ addon.
           On older versions of Node, build your C++ addon using NAN, and on newer versions use N-API.
           node-webworker-threads offers a JavaScript-only way to access Node's Worker Pool.
        2. You can create and manage your own Worker Pool dedicated to computation rather than Node's I/O-themed Worker Pool.
           The most straightforward ways to do this is using Child Process or Cluster.


