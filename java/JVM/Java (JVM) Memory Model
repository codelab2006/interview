Young Generation
    Minor GC
    three parts – Eden Memory and two Survivor Memory spaces.

Old Generation
    Major GC

All the Garbage Collections are “Stop the World” events
because all application threads are stopped until the operation completes.
    Since Young generation keeps short-lived objects,
    Minor GC is very fast and the application doesn’t get affected by this.

    However Major GC takes longer time because it checks all the live objects.
    Major GC should be minimized because it will make your application unresponsive for the garbage collection duration.
    So if you have a responsive application and there are a lot of Major Garbage Collection happening,
    you will notice timeout errors.
    The duration taken by garbage collector depends on the strategy used for garbage collection.
    That’s why it’s necessary to monitor and tune the garbage collector to avoid timeouts in the highly
    responsive applications.

Permanent Generation
    Permanent Generation or “Perm Gen” contains the application metadata required by the JVM to describe
    the classes and methods used in the application. Note that Perm Gen is not part of Java Heap memory.
    Perm Gen is populated by JVM at runtime based on the classes used by the application.
    Perm Gen also contains Java SE library classes and methods.
    Perm Gen objects are garbage collected in a full garbage collection.

    Method Area
        Method Area is part of space in the Perm Gen and used to store class structure (runtime constants
        and static variables) and code for methods and constructors.

        Runtime Constant Pool
            Runtime constant pool is per-class runtime representation of constant pool in a class.
            It contains class runtime constants and static methods. Runtime constant pool is the part of method area.

Memory Pool
    Memory Pools are created by JVM memory managers to create a pool of immutable objects,
    if implementation supports it. String Pool is a good example of this kind of memory pool.
    Memory Pool can belong to Heap or Perm Gen, depending on the JVM memory manager implementation.

Java Stack Memory
    Java Stack memory is used for execution of a thread.
    They contain method specific values that are short-lived and references to other objects in
    the heap that are getting referred from the method

Java Heap Memory Switches
    -Xms	            For setting the initial heap size when JVM starts
    -Xmx	            For setting the maximum heap size
    -Xmn	            For setting the size of the Young Generation, rest of the space goes for Old Generation
    -XX:PermGen	        For setting the initial size of the Permanent Generation memory
    -XX:MaxPermGen	    For setting the maximum size of Perm Gen
    -XX:SurvivorRatio	For providing ratio of Eden space and Survivor Space,
                        for example if Young Generation size is 10m and VM switch is -XX:SurvivorRatio=2 then
                        5m will be reserved for Eden Space and 2.5m each for both the Survivor spaces.
                        The default value is 8.
    -XX:NewRatio	    For providing ratio of old/new generation sizes. The default value is 2.

Java Garbage Collection
    One of the basic way of garbage collection involves three steps:
        1. Marking: This is the first step where garbage collector identifies which objects are in use and which ones are not in use.
        2. Normal Deletion: Garbage Collector removes the unused objects and reclaim the free space to be allocated to other objects.
        3. Deletion with Compacting: For better performance, after deleting unused objects, all the survived objects can be moved to be together.
           This will increase the performance of allocation of memory to newer objects.

Java Garbage Collection Types
    There are five types of garbage collection types that we can use in our applications.
    We just need to use JVM switch to enable the garbage collection strategy for the application.
    Let’s look at each of them one by one.
        1. Serial GC (-XX:+UseSerialGC): Serial GC uses the simple mark-sweep-compact approach for young and old generations garbage collection
           i.e Minor and Major GC.
           Serial GC is useful in client-machines such as our simple stand alone applications and machines with smaller CPU.
           It is good for small applications with low memory footprint.
        2. Parallel GC (-XX:+UseParallelGC): Parallel GC is same as Serial GC except that is spawns N threads
           for young generation garbage collection where N is the number of CPU cores in the system.
           We can control the number of threads using -XX:ParallelGCThreads=n JVM option.
           Parallel Garbage Collector is also called throughput collector because it uses multiple CPUs
           to speed up the GC performance. Parallel GC uses single thread for Old Generation garbage collection.
        3. Parallel Old GC (-XX:+UseParallelOldGC): This is same as Parallel GC except that it uses multiple threads
           for both Young Generation and Old Generation garbage collection.
        4. Concurrent Mark Sweep (CMS) Collector (-XX:+UseConcMarkSweepGC): CMS Collector is also
           referred as concurrent low pause collector. It does the garbage collection for Old generation.
           CMS collector tries to minimize the pauses due to garbage collection by
           doing most of the garbage collection work concurrently with the application threads.
           CMS collector on young generation uses the same algorithm as that of the parallel collector.
           This garbage collector is suitable for responsive applications where we can’t afford longer pause times.
           We can limit the number of threads in CMS collector using -XX:ParallelCMSThreads=n JVM option.
        5. G1 Garbage Collector (-XX:+UseG1GC): The Garbage First or G1 garbage collector is available from Java 7
           and it’s long term goal is to replace the CMS collector.
           The G1 collector is a parallel, concurrent, and incrementally compacting low-pause garbage collector.
           Garbage First Collector doesn’t work like other collectors and there is
           no concept of Young and Old generation space.
           It divides the heap space into multiple equal-sized heap regions.
           When a garbage collection is invoked, it first collects the region with lesser live data,
           hence “Garbage First”. You can find more details about it at Garbage-First Collector Oracle Documentation.

Java Garbage Collection Monitoring
    java -Xmx120m -Xms30m -Xmn10m -XX:PermSize=20m -XX:MaxPermSize=20m -XX:+UseSerialGC -jar ???.jar
    jstat -gc 9582 1000
     S0C    S1C    S0U    S1U      EC       EU        OC         OU       PC     PU         YGC    YGCT  FGC      FGCT     GCT
    1024.0 1024.0  0.0    0.0    8192.0   7933.3   42108.0    23401.3   20480.0  19990.9    157    0.274  40      1.381    1.654
    1024.0 1024.0  0.0    0.0    8192.0   8026.5   42108.0    23401.3   20480.0  19990.9    157    0.274  40      1.381    1.654
    1024.0 1024.0  0.0    0.0    8192.0   8030.0   42108.0    23401.3   20480.0  19990.9    157    0.274  40      1.381    1.654
    1024.0 1024.0  0.0    0.0    8192.0   8122.2   42108.0    23401.3   20480.0  19990.9    157    0.274  40      1.381    1.654
    1024.0 1024.0  0.0    0.0    8192.0   8171.2   42108.0    23401.3   20480.0  19990.9    157    0.274  40      1.381    1.654
    1024.0 1024.0  48.7   0.0    8192.0   106.7    42108.0    23401.3   20480.0  19990.9    158    0.275  40      1.381    1.656
    1024.0 1024.0  48.7   0.0    8192.0   145.8    42108.0    23401.3   20480.0  19990.9    158    0.275  40      1.381    1.656

    S0C and S1C: This column shows the current size of the Survivor0 and Survivor1 areas in KB.

    S0U and S1U:    This column shows the current usage of the Survivor0 and Survivor1 areas in KB.
                    Notice that one of the survivor areas are empty all the time.

    EC and EU:      These columns show the current size and usage of Eden space in KB. Note that EU size is increasing
                    and as soon as it crosses the EC, Minor GC is called and EU size is decreased.

    OC and OU:      These columns show the current size and current usage of Old generation in KB.

    PC and PU:      These columns show the current size and current usage of Perm Gen in KB.

    YGC and YGCT:   YGC column displays the number of GC event occurred in young generation.
                    YGCT column displays the accumulated time for GC operations for Young generation.
                    Notice that both of them are increased in the same row where EU value is dropped because of minor GC.

    FGC and FGCT:   FGC column displays the number of Full GC event occurred.
                    FGCT column displays the accumulated time for Full GC operations.
                    Notice that Full GC time is too high when compared to young generation GC timings.

    GCT:            This column displays the total accumulated time for GC operations.
                    Notice that it’s sum of YGCT and FGCT column values.

    jvisualvm GUI tool
