一个线程在没有同步的情况下读取变量，它可能得到一个过期的值，而不是凭空而来的值，这被称为最低限的安全性。没有申明为volatile的64位数值变量(double和long)没有最低限的安全性
加锁可以保证可见性与原子性；volatile变量只能保证可见性
volatile mark a Java variable as "being stored in main memory"

Full volatile Visibility Guarantee
    If Thread A writes to a volatile variable and Thread B subsequently reads the same volatile variable,
    then all variables visible to Thread A before writing the volatile variable,
    will also be visible to Thread B after it has read the volatile variable.

    If Thread A reads a volatile variable,
    then all all variables visible to Thread A when reading the volatile variable will also be re-read from main memory.

Instruction Reordering Challenges
    However, instruction reordering present a challenge when one of the variables is a volatile variable. Let us look at the MyClass class from the example earlier in this Java volatile tutorial:

    public class MyClass {
        private int years;
        private int months
        private volatile int days;


        public void update(int years, int months, int days){
            this.years  = years;
            this.months = months;
            this.days   = days;
        }
    }
    Once the update() method writes a value to days, the newly written values to years and months are also written to main memory.
    But, what if the Java VM reordered the instructions, like this:

    public void update(int years, int months, int days){
        this.days   = days;
        this.months = months;
        this.years  = years;
    }
    The values of months and years are still written to main memory when the days variable is modified,
    but this time it happens before the new values have been written to months and years.
    The new values are thus not properly made visible to other threads.
    The semantic meaning of the reordered instructions has changed.

The Java volatile Happens-Before Guarantee
    To address the instruction reordering challenge, the Java volatile keyword gives a "happens-before" guarantee,
    in addition to the visibility guarantee. The happens-before guarantee guarantees that:

    1. Reads from and writes to other variables cannot be reordered to occur after a write to a volatile variable,
       if the reads / writes originally occurred before the write to the volatile variable.

       The reads / writes before a write to a volatile variable are guaranteed to "happen before" the write to the volatile variable.
       Notice that it is still possible for
       e.g. reads / writes of other variables located after a write to a volatile to be reordered to occur before that write to the volatile.
       Just not the other way around. From after to before is allowed, but from before to after is not allowed.

    2. Reads from and writes to other variables cannot be reordered to occur before a read of a volatile variable,
       if the reads / writes originally occurred after the read of the volatile variable.
       Notice that it is possible for reads of other variables that occur before the read of a volatile variable can be reordered to occur after the read of the volatile.
       Just not the other way around. From before to after is allowed, but from after to before is not allowed.
