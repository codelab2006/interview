package com.lab.concurrent;

class Util {
    public static synchronized void say() {
        System.out.println(10000);
        try { Thread.sleep(5000); } catch (InterruptedException e) { e.printStackTrace(); }
    }

    public static void hi() {
        synchronized (Util.class) {
            System.out.println("Hi");
            try { Thread.sleep(5000); } catch (InterruptedException e) { e.printStackTrace(); }
        }
    }
}

class Worker implements Runnable {

    private int count = 0;

    private synchronized void add(int value) {
        System.out.println(Thread.currentThread().getName());
        this.count += value;
        try { Thread.sleep(5000); } catch (InterruptedException e) { e.printStackTrace(); }
    }

    private void handle() {
        System.out.println("before handle");
        synchronized (this) {
            System.out.println("handle");
            try { Thread.sleep(5000); } catch (InterruptedException e) { e.printStackTrace(); }
        }
        System.out.println("after handle");
    }

    @Override
    public void run() {
        this.add(1000);
        Util.say();
        this.handle();
        Util.hi();
    }
}

public class Main {

    public static void main(String[] args) {
        Worker worker = new Worker();

        Thread thread1 = new Thread(worker);
        Thread thread2 = new Thread(worker);

        thread1.start();
        thread2.start();
    }
}
