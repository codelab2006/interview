
interface Service {
    void execute();
}

class ServiceImpl implements Service {

    @Override
    public void execute() {
        System.out.println(this.getClass().getName());
    }
}

class DebugProxy implements InvocationHandler {

    private Object obj;

    private DebugProxy(Object obj) {
        this.obj = obj;
    }

    public static Object newInstance(Object obj) {
        return Proxy.newProxyInstance(obj.getClass().getClassLoader(), obj.getClass().getInterfaces(), new DebugProxy(obj));
    }

    @Override
    public Object invoke(Object proxy, Method m, Object[] args) throws Throwable {
        Object result;
        try {
            System.out.println("before method " + m.getName());
            result = m.invoke(obj, args);
        } catch (InvocationTargetException e) {
            throw e.getTargetException();
        } catch (Exception e) {
            throw new RuntimeException("unexpected invocation exception: " + e.getMessage());
        } finally {
            System.out.println("after method " + m.getName());
        }
        return result;
    }
}

public class Main {

    public static void main(String[] args) {
        Service service = (Service) DebugProxy.newInstance(new ServiceImpl());
        service.execute();
    }
}