一个类实现该接口表明该类的实例通过java.lang.Object#clone()方法拷贝字段的字段是合法的。
在一个没有实现该接口的实例上调用对象的clone方法会抛出CloneNotSupportedException异常。
通常，类实现该接口应该用public重写Object.clone方法（protected）。
注意，该接口没包含clone方法，因此，仅仅实现该接口是不可能克隆对象，即使通过反射调用克隆方法，也不能保证它会成功。

class Bug implements Cloneable {

    private String name;

    public Bug(String name) {
        this.name = name;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    protected Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}

class Apple implements Cloneable {

    private Bug bug;

    public Apple() {}

    public Apple(String bugName) {
        bug = new Bug(bugName);
    }

    public void setBug(Bug bug) {
        this.bug = bug;
    }

    public Bug getBug() {
        return this.bug;
    }
}

class ColoredApple extends Apple {

    private String color;

    public ColoredApple() {}

    public ColoredApple(String bugName, String color) {
        super(bugName);
        this.color = color;
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    @Override
    protected Object clone() throws CloneNotSupportedException {
        ColoredApple clone = (ColoredApple) super.clone();
        clone.setBug((Bug) clone.getBug().clone());
        return clone;
    }
}

public class Main {

    static void print(Object o) {
        System.out.println(o);
    }

    public static void main(String[] args) throws CloneNotSupportedException {
        ColoredApple a1 = new ColoredApple("Big Bug", "red");
        ColoredApple ca = (ColoredApple) ((ColoredApple) a1).clone();

        System.out.println(a1.getBug().getName()); // Big Bug
        System.out.println(ca.getBug().getName()); // Big Bug

        System.out.println(a1.getColor()); // red
        System.out.println(ca.getColor()); // red

        System.out.println(ca == a1); // false

        System.out.println(a1.getBug()); // com.lab.Bug@60e53b93
        System.out.println(ca.getBug()); // com.lab.Bug@5e2de80c

        System.out.println(ca.getBug() == a1.getBug()); // false
    }
}

延伸阅读：
    深拷贝和浅拷贝中,实现clone()的第二点,是要重写Object()类的clone()方法,并将protected改为public。
    如果不重写行吗? 因为Object类的clone()方法是protected修饰的, 我原来对protected的理解为: "同一个包或者不同包的子类可以访问"

    Object类是所有 类的父类,那么为什么子类不能访问父类的protected修饰的方法呢?
    "与基类不在同一个包中的子类，只能访问自身从基类继承而来的受保护成员，而不能访问基类实例本身的受保护成员"

    protected 修饰的类和属性,在同一个包或者不同包的子类可以访问,可以理解为:
    在不同包时,指的是通过自身实例(自身的引用)访问,而不能通过父类实例(引用)访问。
    在相同包时,protected和public是一样的。注意(Object类和TestClone可不是同一个包)


            │ Class │ Package │ Subclass │ Subclass │ World
            │       │         │(same pkg)│(diff pkg)│
────────────┼───────┼─────────┼──────────┼──────────┼────────
public      │   +   │    +    │    +     │     +    │   +
────────────┼───────┼─────────┼──────────┼──────────┼────────
protected   │   +   │    +    │    +     │     +    │
────────────┼───────┼─────────┼──────────┼──────────┼────────
no modifier │   +   │    +    │    +     │          │
────────────┼───────┼─────────┼──────────┼──────────┼────────
private     │   +   │         │          │          │

+ : accessible
blank : not accessible
